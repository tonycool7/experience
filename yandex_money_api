<?php

namespace App\Http\Controllers\YandexMoney;

use App\Http\Requests\Balance;
use App\Wifihotspot\Payments;
use App\wifihotspot\Wifi_invoice;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\File;
use YandexCheckout\Client\YandexMoneyApi;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;

class ApiController extends Controller
{
    private $client;
    private $idempotenceKey;

    public function __construct()
    {
        $this->idempotenceKey = uniqid('1234', true);
        $this->client = new YandexMoneyApi();
        $this->client->setAuth(env('YANDEX_SHOPID'), env('YANDEX_SECRETKEY'));
    }

    public function make_payment(Balance $request){
        $locations = Auth::user()->locations;
        $balance = Auth::user()->balance;
        switch ($request->payment_method){
            case 'alfabank':
                $amount = $request->amount;
                $method = $request->payment_method;
                if(!isset($request->login)) return view('wifihotspot.balance.alfabank', compact('method','locations', 'balance', 'amount'));
                break;
            case 'sberbank':
                $amount = $request->amount;
                $method = $request->payment_method;
                if(!isset($request->phone)) return view('wifihotspot.balance.sberbank', compact('method','locations', 'balance', 'amount'));
                break;
            case 'bank_card':
            case 'webmoney':
            case 'yandex_money':
                return $this->redirectPaymentMethods($request->amount, $request->payment_method);
                break;

            case 'cash':
                if(!isset(Auth::user()->kpp)) return redirect('/profile/'.Auth::id().'/edit');
                $tax_amount = round(($request->amount) - ($request->amount)/1.18);
                $total = round((($request->amount) - ($request->amount)/1.18) + ($request->amount), 2);
                Wifi_invoice::create([
                    'user_id' => Auth::id(),
                    'type' => 'hotspot_payment',
                    'tax_amount' => $tax_amount,
                    'total' => $total,
                    'amount' => $request->amount
                ]);
                $invoice = view('wifihotspot.balance.invoice')
                    ->with([
                        'user'=> Auth::user(),
                        'qty'=>'1','tax_amount' => $tax_amount,
                        'total' => $total,
                        'amount' => $request->amount,
                        'amount_in_russian' => $this->num2str($total)
                    ])->render();
                File::put(public_path().'/invoice.htm', $invoice);
                return response()->download(public_path().'/invoice.htm');
                break;
            default:
                break;
        }
    }

    public function savePayment($response){
        Payments::create(['user_id' => \Auth::id(),'payment_id' => $response->getId(), 'status' => $response->getStatus(),
            'payment_medium' => 'YandexMoney', 'payment_method' => $response->getPaymentMethod()->type, 'amount' => $response->getAmount()->value]);
    }

    public function sberbank(Request $request){
        $response = $this->client->createPayment(
            array(
                'amount' => array(
                    'value' => $request->amount,
                    'currency' => 'RUB',
                ),
                'payment_method_data' => array(
                    'type' => 'sberbank',
                    'phone' => $request->phone
                ),
                'confirmation' => array(
                    'type' => 'external'
                ),
            ),
            $this->idempotenceKey
        );

        $this->savePayment($response);

        return redirect()->back();
    }

    public function alfa(Request $request){
        $response = $this->client->createPayment(
            array(
                'amount' => array(
                    'value' => $request->amount,
                    'currency' => 'RUB',
                ),
                'payment_method_data' => array(
                    'type' => 'alfabank',
                    'phone' => $request->login
                ),
                'confirmation' => array(
                    'type' => 'external'
                ),
            ),
            $this->idempotenceKey
        );

        $this->savePayment($response);

        return redirect()->back();
    }

    public function redirectPaymentMethods($amount, $method){
        $response = $this->client->createPayment(
            array(
                'amount' => array(
                    'value' => $amount,
                    'currency' => 'RUB',
                ),
                'payment_method_data' => array(
                    'type' => $method,
                ),
                'confirmation' => array(
                    'type' => 'redirect',
                    'return_url' => 'https://hs.sharelog.in/topup',
                ),
            ),
            $this->idempotenceKey
        );

        $this->savePayment($response);

        return redirect($response->confirmation->confirmationUrl);
    }

    public function ins(Request $request){
        \Log::info("INS:",$request->all());

        $r = json_decode($request->getContent());

        $payment = Payments::where('payment_id', $r->object->id)->first();
        switch ($r->event){
            case 'payment.waiting_for_capture':
                \Log::info("INS:",['YandexPayment: Accepting payment']);

                $payment->update(['status' => $r->object->status]);
                $response = $this->client->capturePayment(
                    array(
                        'amount' => array(
                            'value' => $payment->amount,
                            'currency' => 'RUB',
                        ),
                    ),
                    $payment->payment_id,
                    $this->idempotenceKey
                );
                \Log::info("INS:",["Payment confirmed: ",$response]);
                $balance = (int)$payment->user->balance + (int)$response->getAmount()->value;
                $payment->update(['status' => $response->getStatus()]);
                $payment->user->update(['balance' => $balance]);
                break;
            case 'payment.succeeded':
                \Log::info("INS:",["Payment success "]);

                break;
            default:
                break;
        }
    }

    function num2str($num) {
        $nul='ноль';
        $ten=array(
            array('','один','два','три','четыре','пять','шесть','семь', 'восемь','девять'),
            array('','одна','две','три','четыре','пять','шесть','семь', 'восемь','девять'),
        );
        $a20=array('десять','одиннадцать','двенадцать','тринадцать','четырнадцать' ,'пятнадцать','шестнадцать','семнадцать','восемнадцать','девятнадцать');
        $tens=array(2=>'двадцать','тридцать','сорок','пятьдесят','шестьдесят','семьдесят' ,'восемьдесят','девяносто');
        $hundred=array('','сто','двести','триста','четыреста','пятьсот','шестьсот', 'семьсот','восемьсот','девятьсот');
        $unit=array( // Units
            array('копейка' ,'копейки' ,'копеек',	 1),
            array('рубль'   ,'рубля'   ,'рублей'    ,0),
            array('тысяча'  ,'тысячи'  ,'тысяч'     ,1),
            array('миллион' ,'миллиона','миллионов' ,0),
            array('миллиард','милиарда','миллиардов',0),
        );
        //
        list($rub,$kop) = explode('.',sprintf("%015.2f", floatval($num)));
        $out = array();
        if (intval($rub)>0) {
            foreach(str_split($rub,3) as $uk=>$v) { // by 3 symbols
                if (!intval($v)) continue;
                $uk = sizeof($unit)-$uk-1; // unit key
                $gender = $unit[$uk][3];
                list($i1,$i2,$i3) = array_map('intval',str_split($v,1));
                // mega-logic
                $out[] = $hundred[$i1]; # 1xx-9xx
                if ($i2>1) $out[]= $tens[$i2].' '.$ten[$gender][$i3]; # 20-99
                else $out[]= $i2>0 ? $a20[$i3] : $ten[$gender][$i3]; # 10-19 | 1-9
                // units without rub & kop
                if ($uk>1) $out[]= $this->morph($v,$unit[$uk][0],$unit[$uk][1],$unit[$uk][2]);
            } //foreach
        }
        else $out[] = $nul;
        $out[] = $this->morph(intval($rub), $unit[1][0],$unit[1][1],$unit[1][2]); // rub
        $out[] = $kop.' '.$this->morph($kop,$unit[0][0],$unit[0][1],$unit[0][2]); // kop
        return trim(preg_replace('/ {2,}/', ' ', join(' ',$out)));
    }

    /**
     * Склоняем словоформу
     * @ author runcore
     */
    function morph($n, $f1, $f2, $f5) {
        $n = abs(intval($n)) % 100;
        if ($n>10 && $n<20) return $f5;
        $n = $n % 10;
        if ($n>1 && $n<5) return $f2;
        if ($n==1) return $f1;
        return $f5;
    }
}
